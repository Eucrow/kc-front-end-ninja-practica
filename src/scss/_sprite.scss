/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$icon-heart-red-name: 'icon-heart-red';
$icon-heart-red-x: 50px;
$icon-heart-red-y: 25px;
$icon-heart-red-offset-x: -50px;
$icon-heart-red-offset-y: -25px;
$icon-heart-red-width: 20px;
$icon-heart-red-height: 20px;
$icon-heart-red-total-width: 75px;
$icon-heart-red-total-height: 69px;
$icon-heart-red-image: '../img/sprite.png';
$icon-heart-red: (50px, 25px, -50px, -25px, 20px, 20px, 75px, 69px, '../img/sprite.png', 'icon-heart-red', );
$icon-heart-name: 'icon-heart';
$icon-heart-x: 0px;
$icon-heart-y: 49px;
$icon-heart-offset-x: 0px;
$icon-heart-offset-y: -49px;
$icon-heart-width: 20px;
$icon-heart-height: 20px;
$icon-heart-total-width: 75px;
$icon-heart-total-height: 69px;
$icon-heart-image: '../img/sprite.png';
$icon-heart: (0px, 49px, 0px, -49px, 20px, 20px, 75px, 69px, '../img/sprite.png', 'icon-heart', );
$icon-placeholder-name: 'icon-placeholder';
$icon-placeholder-x: 0px;
$icon-placeholder-y: 0px;
$icon-placeholder-offset-x: 0px;
$icon-placeholder-offset-y: 0px;
$icon-placeholder-width: 50px;
$icon-placeholder-height: 49px;
$icon-placeholder-total-width: 75px;
$icon-placeholder-total-height: 69px;
$icon-placeholder-image: '../img/sprite.png';
$icon-placeholder: (0px, 0px, 0px, 0px, 50px, 49px, 75px, 69px, '../img/sprite.png', 'icon-placeholder', );
$icon-search-name: 'icon-search';
$icon-search-x: 50px;
$icon-search-y: 0px;
$icon-search-offset-x: -50px;
$icon-search-offset-y: 0px;
$icon-search-width: 25px;
$icon-search-height: 25px;
$icon-search-total-width: 75px;
$icon-search-total-height: 69px;
$icon-search-image: '../img/sprite.png';
$icon-search: (50px, 0px, -50px, 0px, 25px, 25px, 75px, 69px, '../img/sprite.png', 'icon-search', );
$icon-up-name: 'icon-up';
$icon-up-x: 20px;
$icon-up-y: 49px;
$icon-up-offset-x: -20px;
$icon-up-offset-y: -49px;
$icon-up-width: 20px;
$icon-up-height: 20px;
$icon-up-total-width: 75px;
$icon-up-total-height: 69px;
$icon-up-image: '../img/sprite.png';
$icon-up: (20px, 49px, -20px, -49px, 20px, 20px, 75px, 69px, '../img/sprite.png', 'icon-up', );
$spritesheet-width: 75px;
$spritesheet-height: 69px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($icon-heart-red, $icon-heart, $icon-placeholder, $icon-search, $icon-up, );
$spritesheet: (75px, 69px, '../img/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
